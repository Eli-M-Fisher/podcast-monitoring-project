services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT}
      ZOOKEEPER_TICK_TIME: ${ZOOKEEPER_TICK_TIME}
    ports:
      - "${ZOOKEEPER_CLIENT_PORT}:${ZOOKEEPER_CLIENT_PORT}"

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    depends_on:
      - zookeeper
    ports:
      - "${KAFKA_INTERNAL_PORT}:${KAFKA_INTERNAL_PORT}"
      - "${KAFKA_EXTERNAL_PORT}:${KAFKA_EXTERNAL_PORT}"
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: ${KAFKA_AUTO_CREATE_TOPICS_ENABLE}
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_CLIENT_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:${KAFKA_INTERNAL_PORT},PLAINTEXT_HOST://0.0.0.0:${KAFKA_EXTERNAL_PORT}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:${KAFKA_INTERNAL_PORT},PLAINTEXT_HOST://${KAFKA_EXTERNAL_HOST}:${KAFKA_EXTERNAL_PORT}
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
    healthcheck:
      test: ["CMD", "kafka-topics", "--list", "--bootstrap-server", "localhost:${KAFKA_INTERNAL_PORT}"]
      interval: 10s
      timeout: 5s
      retries: 10

  producer:
    build:
      context: .
      dockerfile: ./producer_service/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
    restart: on-failure
    environment:
      KAFKA_BROKER: kafka:${KAFKA_INTERNAL_PORT}
      PRODUCER_TOPIC: ${PRODUCER_TOPIC}
      PODCASTS_DIR: ${PODCASTS_DIR}
    volumes:
      - ${PODCASTS_DIR_HOST}:${PODCASTS_DIR}:ro

  consumer:
    build:
      context: .
      dockerfile: ./consumer_service/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      mongo:
        condition: service_healthy
    restart: on-failure
    environment:
      KAFKA_BROKER: kafka:${KAFKA_INTERNAL_PORT}
      CONSUMER_TOPIC: ${CONSUMER_TOPIC}
      ES_HOST: ${ES_HOST}:${ES_PORT}
      ES_INDEX: ${ES_INDEX}
      MONGO_URI: ${MONGO_URI}
      MONGO_DB: ${MONGO_DB}
      MONGO_COLLECTION: ${MONGO_COLLECTION}
    volumes:
      - ${PODCASTS_DIR_HOST}:${PODCASTS_DIR}:ro

  transcriber:
    build:
      context: .
      dockerfile: ./transcriber_service/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    restart: on-failure
    environment:
      KAFKA_BROKER: kafka:${KAFKA_INTERNAL_PORT}
      TRANSCRIBER_TOPIC: ${TRANSCRIBER_TOPIC}
      ES_HOST: ${ES_HOST}:${ES_PORT}
      ES_INDEX: ${ES_INDEX}
    volumes:
      - ${PODCASTS_DIR_HOST}:${PODCASTS_DIR}:ro

  analyzer:
    build:
      context: .
      dockerfile: ./analyzer_service/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    restart: on-failure
    environment:
      KAFKA_BROKER: kafka:${KAFKA_INTERNAL_PORT}
      ANALYZER_TOPIC: ${ANALYZER_TOPIC}
      ES_HOST: ${ES_HOST}:${ES_PORT}
      ES_INDEX: ${ES_INDEX}
      HOSTILE_WORDLIST_BASE64: ${HOSTILE_WORDLIST_BASE64}
      LESS_HOSTILE_WORDLIST_BASE64: ${LESS_HOSTILE_WORDLIST_BASE64}
      BDS_THRESHOLD: ${BDS_THRESHOLD}
      MEDIUM_THRESHOLD: ${MEDIUM_THRESHOLD}
      HIGH_THRESHOLD: ${HIGH_THRESHOLD}

  query_service:
    build:
      context: .
      dockerfile: ./query_service/Dockerfile
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: on-failure
    environment:
      ES_HOST: ${ES_HOST}:${ES_PORT}
      ES_INDEX: ${ES_INDEX}
    ports:
      - "${QUERY_PORT}:${QUERY_PORT}"

      
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.2
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "${ES_PORT}:${ES_PORT}"
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:${ES_PORT} >/dev/null || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10

  kibana:
    image: docker.elastic.co/kibana/kibana:8.15.2
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_HOSTS=${ES_HOST}:${ES_PORT}
    ports:
      - "${KIBANA_PORT}:${KIBANA_PORT}"

  mongo:
    image: mongo:7.0
    ports:
      - "${MONGO_PORT}:${MONGO_PORT}"
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 10

volumes:
  mongo_data: